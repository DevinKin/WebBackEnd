<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<!--
mapper接口代理实现编写规则
    1. 映射文件中namespace要等于接口的全路径名称
    2. 映射文件中sql语句id要等于接口的方法名称
    3. 映射文件中传入参数要等于接口方法的传入参数类型
    4. 映射文件中返回结果集类型要等于接口方法的返回值类型
    -->
<!-- namespace:命名空间,做sql隔离 -->
<mapper namespace="cn.devinkin.mapper.UserMapper">
    <!-- 封装sql条件,封装后,可以重用
     id:是这个sql条件的唯一标识
     -->
    <sql id="user_where">
        <where>
            <if test="username != null and username != ''">
                and username like '%${username}%'
            </if>
            <if test="sex != null and sex != ''">
                and sex = #{sex}
            </if>
        </where>
    </sql>



    <!--
    id:sql语句唯一标识
    parameterType:指定传入参数类型
    resultType:返回结果集类型
    #{}占位符:起到占位作用,如果传入的是基本类型(string,long,double,int,boolean,float等),那么#{}中的变量名称可以随意写.
     -->
    <select id="findUserById" parameterType="java.lang.Integer" resultType="User">
		select * from User where id=#{id}
	</select>

    <!--
    如果返回结果为集合,可以调用selectList方法,这个方法返回的结果是一个集合
    所以映射文件中,返回类型应该配置成集合泛型的类型
    ${}拼接符:字符串原样拼接,如果传入的参数是基本类型,那么${}中的变量名称必须是value
    注意:拼接符有sql注入的风险,所以要慎重使用,
    -->
    <select id="findUserByUserName" parameterType="java.lang.Integer" resultType="User">
		select * from User where Username like '%${value}%'
	</select>

    <!--
    #{}:如果传入的参数是pojo类型,那么${}中的变量名称必须是pojo中对应的属性
    如果要返回数据库自增主键:可以使用 select LAST_INSERT_ID()
    -->
    <insert id="insertUser" parameterType="User">
        <!-- 执行 LAST_INSERT_ID()数据库函数,返回自增的主键
        keyProperty:将返回的主键放入传入参数的Id中保存.
        order:当前函数相对于insert语句的执行顺序
        resultType:id的类型,也就是keyProperty中属性的类型
        -->
        <selectKey keyProperty="id" order="AFTER" resultType="java.lang.Integer">
            select LAST_INSERT_ID();
        </selectKey>
        insert into User(Username, birthday, sex, address) values (#{Username}, #{birthday}, #{sex}, #{address})
    </insert>

    <delete id="delUser" parameterType="java.lang.Integer">
		delete from User where id = #{id}
	</delete>

    <update id="updateUser" parameterType="User">
        update User set Username=#{Username} where id=#{id}
    </update>

    <select id="findUserByVo" parameterType="cn.devinkin.mypojo.QueryVo" resultType="cn.devinkin.mypojo.User">
        select * from user where username like '%${user.username}%' and sex = #{user.sex}
    </select>

    <!-- 只有返回结果为一行一列的时候,那么返回值类型才可以指定为基本类型 -->
    <select id="findUserCount" resultType="java.lang.Integer">
        select count(*) from user
    </select>

    <select id="findUseByUsernameAndSex" parameterType="cn.devinkin.mypojo.User" resultType="cn.devinkin.mypojo.User">
        select * from user
        <!-- where标签的作用:
            1. 会自动向sql语句中添加where关键字
            2. 会去掉第一个条件的and关键字 -->
        <!-- 调用sql封装的条件 -->
        <include refid="user_where"/>
        <!--<where>-->
            <!--<if test="username != null and username != ''">-->
                <!--and username like '%${username}%'-->
            <!--</if>-->
            <!--<if test="sex != null and sex != ''">-->
                <!--and sex = #{sex}-->
            <!--</if>-->
        <!--</where>-->
    </select>

    <select id="findUserByIds" parameterType="cn.devinkin.mypojo.QueryVo" resultType="cn.devinkin.mypojo.User">
        select * from user
        <where>
            <if test="ids != null">
                <!--
                foreach:循环传入的集合参数
                collection:传入的集合的变量名称
                item:每次循环将循环出的数据放入这个变量中
                open:循环开始拼接的字符串
                close:循环结束拼接的字符串
                separator:循环中拼接的分隔符
                -->
                <foreach collection="ids" item="id" open="id in (" close=")" separator=",">
                    #{id}
                </foreach>
            </if>
        </where>
    </select>


    <!-- 一对一自动映射 -->
    <select id="findOrdersAndUser1" resultType="CustomOrders">
        select a.*, b.id uid, username, birthday, sex, address
        from orders a, user b
        where a.user_id = b.id
    </select>

    <!-- 一对一手动映射 -->
    <!-- resultMap属性说明:
    id:resultMap的唯一标识
    type:将查询出的数据放入指定的对象中
    注意,手动映射需要指定数据库表的字段名与pojo类的属性名称的对应关系
    -->
    <resultMap id="orderAndUserResultMap" type="Orders">
        <!-- id 标签指定主键字段对应关系
        column: 指定数据库表中的字段
        property: 对应pojo类的属性名称
        -->
        <id column="id" property="id"/>
        <!-- result 标签指定非主键字段的对应关系
        column: 指定数据库表中的字段
        property: 对应pojo类的属性名称
        -->
        <result column="uid" property="userId"/>
        <result column="number" property="number"/>
        <result column="createtime" property="createtime"/>
        <result column="note" property="note"/>

        <!-- association 标签指定单个对象的对应关系
        property: 指定将数据放入pojo类中的成员类的属性中
        javaType: pojo类的成员类全路径名
         -->
        <association property="user" javaType="User">
            <!--
            column: 指定数据库表中的字段
            property: 对应pojo类的属性名称
            -->
            <id column="uid" property="id"/>
            <result column="username" property="username"/>
            <result column="birthday" property="birthday"/>
            <result column="sex" property="sex"/>
            <result column="address" property="address"/>
        </association>
    </resultMap>

    <select id="findOrdersAndUser2" resultMap="orderAndUserResultMap">
        select a.*, b.id uid, username, birthday, sex, address
        from orders a, user b
        where a.user_id = b.id
    </select>


    <resultMap id="userAndOrdersResultMap" type="User">
        <id column="id" property="id"/>
        <result column="username" property="username"/>
        <result column="birthday" property="birthday"/>
        <result column="sex" property="sex"/>
        <result column="address" property="address"/>

        <!-- 指定对应的集合对象关系映射
        property: pojo类中的对象集合的属性
        ofType: 对象集合属性中的泛型类型
        -->
        <collection property="ordersList" ofType="Orders">
            <id column="oid" property="id"/>
            <result column="user_id" property="userId"/>
            <result column="number" property="number"/>
            <result column="createtime" property="createtime"/>
            <result column="note" property="note"/>
        </collection>
    </resultMap>
    <select id="findUserAndOrders" resultMap="userAndOrdersResultMap">
        select a.*, b.id oid, user_id, number, createtime,note
        from user a, orders b where a.id = b.user_id;
    </select>
</mapper>
